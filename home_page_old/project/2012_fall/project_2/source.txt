#include "mbed.h"

/*************Global variable*******************/
Serial pc(USBTX, USBRX);
Serial device(p28, p27);
DigitalOut control(p26);
DigitalOut P21(p21);
DigitalOut P22(p22);
DigitalOut P23(p23);
DigitalOut P24(p24);
DigitalOut P25(p25);
DigitalOut P28(p29);
DigitalOut P29(p30);

#define receive_data_size 9
#define transmit_data_size 8
/******************CRC*********************/
static unsigned char auchCRCHi[] = {
    0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
        0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
        0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
        0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
        0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
        0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
        0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
        0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
        0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
        0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
        0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
        0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
        0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
        0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
        0x80,0x41,0x00,0xC1,0x81,0x40
};

static char auchCRCLo[] = {
    0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,
        0x07,0xC7,0x05,0xC5,0xC4,0x04,0xCC,0x0C,0x0D,0xCD,
        0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,
        0x08,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,
        0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC,0x14,0xD4,
        0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,
        0x11,0xD1,0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,
        0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4,
        0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,
        0x3B,0xFB,0x39,0xF9,0xF8,0x38,0x28,0xE8,0xE9,0x29,
        0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
        0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,
        0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0,0xA0,0x60,
        0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,
        0xA5,0x65,0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,
        0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68,
        0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,
        0x7F,0xBF,0x7D,0xBD,0xBC,0x7C,0xB4,0x74,0x75,0xB5,
        0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
        0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
        0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9C,0x5C,
        0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,
        0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,
        0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C,
        0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,
        0x43,0x83,0x41,0x81,0x80,0x40
};

unsigned short CRC16(unsigned char *puchMsg,unsigned short usDataLen)
{
  unsigned char uchCRCHi = 0xFF ; /* 高CRC字节初始化*/
  unsigned char uchCRCLo = 0xFF ; /* 低CRC 字节初始化*/
  unsigned uIndex ; /* CRC循环中的索引*/
  while (usDataLen--) /* 传输消息缓冲区*/
  {
    uIndex = uchCRCHi ^ *puchMsg++ ; /* 计算CRC */
    uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
    uchCRCLo = auchCRCLo[uIndex] ;
   }
   return ((uchCRCHi << 8) | uchCRCLo) ;
}
/******************************************************************/

/*************************translate receive data into decimal number******************/
short BinaryToData(unsigned char origin[],short start)
{
    short pow = 1;
    short count = 0;
    short result = 0;
    for(count = 1;count <= 8;count++)
    {
        if(origin[start + 8 - count] == '1')
            result+=pow;
        else if(origin[start + 8 - count] != '0')
        {
            printf("Error in Bianry strings\n");
            return 0;
        }
        pow*=2;
    }
    return result;
}

float pow(short base,short power)
{
    float result = 1;
    if(power < 0)
    {
        short count = 0;
        for(count = 0;count > power;count--)
            result/=base;
        return result;
    }
    else
    {
        short count= 0;
        for(count = 0;count < power;count++)
            result*=base;
        return result;
    }
    
}
float BinaryToData(unsigned char origin[],short start,short end,short power)
{
    float result = pow(2,power);
    short count;
    for(count = start;count < end;count++)
    {
        if(origin[count] == '1')
            result+=pow(2,short(power - count + start - 1));
    }
    return result;
}
void DataToBinary(unsigned char data,unsigned char *destination,int end)
{
    int count = 0;
    while(data != 0)
    {
        if(data == 1)
            destination[end - count++] = '1';
        else if(data % 2 == 0)
            destination[end - count++] = '0';
        else
            destination[end - count++] = '1'; 
        data/=2;          
    }
    while(count < 8)
    {
        destination[end - count++] = '0';
    }
}
float translate(unsigned char message[])
{
    unsigned char temp[32];
    DataToBinary(message[3],temp,7);
    DataToBinary(message[4],temp,15);
    DataToBinary(message[5],temp,23);
    DataToBinary(message[6],temp,31);
    short pow = BinaryToData(temp,1);
    float result = BinaryToData(temp,9,31,pow - 127);
    return result;
}
/*********************************************************************************/

/*******************check whether received data is avaliable or not******************/
bool avaliable(unsigned char receive_data[])
{
    unsigned short temp = CRC16(receive_data, receive_data_size - 2);//7 depended on the receive data size
    if((receive_data[receive_data_size - 2] == (temp >> 8)) && (receive_data[receive_data_size - 1] == (temp & 0x00ff)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
/**********************************************************************************/

/******************send command line to slave device and get the data from it***********************/
bool read_phase_line_to_neutral_volts(unsigned int phase_num, unsigned char address)//phase_num from 1 to 3, address from 1 to 247(using hex here)
{
    //unsigned char slave_address = address;
    //unsigned char function = 0x04;
    //unsigned char starting_address_high = 0x00;//register start address
    //unsigned char starting_address_low = 0x00;
    //unsigned char number_of_points_high = 0x00;//register number
    //unsigned char number_of_points_low = 0x02;
    //unsigned char error_check_low = *;
    //unsigned char error_check_high = *;
    unsigned int i = 0;
    unsigned char transmit_data[transmit_data_size];//8 is depended on the transmit data size
    unsigned char receive_data[receive_data_size];//9 is depended on the receive data size
    unsigned char starting_address_low[] = {0x00, 0x02, 0x04};
    transmit_data[0] = address;
    transmit_data[1] = 0x04;//function number for read data
    transmit_data[2] = 0x00;
    transmit_data[3] = starting_address_low[phase_num - 1];
    transmit_data[4] = 0x00;
    transmit_data[5] = 0x02;
    unsigned short temp = CRC16(transmit_data, transmit_data_size - 2);//6 depended on the transmit data size
    transmit_data[6] = temp >> 8;;
    transmit_data[7] = temp & 0x00ff;
    pc.printf("Reading Phase%d Line to Neutral Volts......\r\n", phase_num);
    
    /******************check whether avaliable or not**************/
    control = 1;//0 for read, 1 for write
    for(int count = 0; count < transmit_data_size; count++)
    {
        device.putc( transmit_data[count] );
    }
    wait(0.002);//time delay before control switchs
    control = 0;
    while( device.readable() )
    {
        device.getc();//clean buffer
    }
    wait(0.06);//time delay before get data from slave device,60ms
    while( device.readable() )
    {
        receive_data[i++] = device.getc();
    }
    bool flag = avaliable(receive_data);
    /************************************************************/
    
    for(int j = 0; j < receive_data_size; j++)
    {
        pc.printf("%x ", receive_data[j]);
    }
    if(flag == true)
    {
        pc.printf("\r\ntrue\r\n%f\tV\r\n\r\n", translate(receive_data));
        return true;
    }
    else
    {   
        pc.printf("\r\nfalse\r\n\r\n");
        return false;
    }
}

bool read_phase_current(unsigned int phase_num, unsigned char address)//phase_num from 1 to 3, address from 1 to 247(using hex here)
{
    unsigned int i = 0;
    unsigned char transmit_data[transmit_data_size];//8 is depended on the transmit data size
    unsigned char receive_data[receive_data_size];//9 is depended on the receive data size
    unsigned char starting_address_low[] = {0x06, 0x08, 0x0A};
    transmit_data[0] = address;
    transmit_data[1] = 0x04;//function number for read data
    transmit_data[2] = 0x00;
    transmit_data[3] = starting_address_low[phase_num - 1];
    transmit_data[4] = 0x00;
    transmit_data[5] = 0x02;
    unsigned short temp = CRC16(transmit_data, transmit_data_size - 2);//6 depended on the transmit data size
    transmit_data[6] = temp >> 8;;
    transmit_data[7] = temp & 0x00ff;
    pc.printf("Reading Phase%d Current......\r\n", phase_num);
    
    /******************check whether avaliable or not**************/
    control = 1;//0 for read, 1 for write
    for(int count = 0; count < transmit_data_size; count++)
    {
        device.putc( transmit_data[count] );
    }
    wait(0.002);//time delay before control switchs
    control = 0;
    while( device.readable() )
    {
        device.getc();//clean buffer
    }
    wait(0.06);//time delay before get data from slave device,60ms
    while( device.readable() )
    {
        receive_data[i++] = device.getc();
    }
    bool flag = avaliable(receive_data);
    /************************************************************/
    
    for(int j = 0; j < receive_data_size; j++)
    {
        pc.printf("%x ", receive_data[j]);
    }
    if(flag == true)
    {
        pc.printf("\r\ntrue\r\n%f\tV\r\n\r\n", translate(receive_data));
        return true;
    }
    else
    {   
        pc.printf("\r\nfalse\r\n\r\n");
        return false;
    }
}

bool read_phase_power(unsigned int phase_num, unsigned char address)//phase_num from 1 to 3, address from 1 to 247(using hex here)
{
    unsigned int i = 0;
    unsigned char transmit_data[transmit_data_size];//8 is depended on the transmit data size
    unsigned char receive_data[receive_data_size];//9 is depended on the receive data size
    unsigned char starting_address_low[] = {0x0C, 0x0E, 0x10};
    transmit_data[0] = address;
    transmit_data[1] = 0x04;//function number for read data
    transmit_data[2] = 0x00;
    transmit_data[3] = starting_address_low[phase_num - 1];
    transmit_data[4] = 0x00;
    transmit_data[5] = 0x02;
    unsigned short temp = CRC16(transmit_data, transmit_data_size - 2);//6 depended on the transmit data size
    transmit_data[6] = temp >> 8;;
    transmit_data[7] = temp & 0x00ff;
    pc.printf("Reading Phase%d Power......\r\n", phase_num);
    
    /******************check whether avaliable or not**************/
    control = 1;//0 for read, 1 for write
    for(int count = 0; count < transmit_data_size; count++)
    {
        device.putc( transmit_data[count] );
    }
     wait(0.002);//time delay before control switchs
    control = 0;
    while( device.readable() )
    {
        device.getc();//clean buffer
    }
    wait(0.06);//time delay before get data from slave device,60ms
    while( device.readable() )
    {
        receive_data[i++] = device.getc();
    }
    bool flag = avaliable(receive_data);
    /************************************************************/
    
    for(int j = 0; j < receive_data_size; j++)
    {
        pc.printf("%x ", receive_data[j]);
    }
    if(flag == true)
    {
        pc.printf("\r\ntrue\r\n%f\tV\r\n\r\n", translate(receive_data));
        return true;
    }
    else
    {   
        pc.printf("\r\nfalse\r\n\r\n");
        return false;
    }
}
/**************************************************************************************/


int main()
{
    device.format(8, Serial::None, 2);
    device.baud(9600);//format of device
    
    while(1)
    {
        read_phase_line_to_neutral_volts(1, 0x01 );
        wait(1);
        
        read_phase_line_to_neutral_volts(2, 0x01 );
        wait(1);
        
        read_phase_line_to_neutral_volts(3, 0x01 );
        wait(1);
        
        read_phase_current(1, 0x01 );
        wait(1);
        
        read_phase_current(2, 0x01 );
        wait(1);
        
        read_phase_current(3, 0x01 );
        wait(1);
        
        read_phase_power(1, 0x01 );
        wait(1);
        
        read_phase_power(2, 0x01 );
        wait(1);
        
        read_phase_power(3, 0x01 );
        wait(1);
    }
}
